name: StopECSTasks
on:
  push:
    branches: [ "main" ]

jobs:
  stop_task:
    runs-on: ubuntu-latest

    steps:
      - name: Retrieve ECS Cluster and Service Names
        id: get-names
        run: |
          echo "Retrieving ECS Cluster and Service Names..."
          # Retrieve ECS cluster and service names
          ecs_info=$(aws ecs list-services --query "serviceArns[0]" --output json)
          cluster_name=$(echo $ecs_info | jq -r '.[0]' | cut -d'/' -f2)
          service_name=$(echo $ecs_info | jq -r '.[0]' | cut -d'/' -f3)

          # Debugging: Print cluster and service names
          echo "Cluster Name: $cluster_name"
          echo "Service Name: $service_name"

          # Check if cluster_name and service_name are empty
          if [ -z "$cluster_name" ] || [ -z "$service_name" ]; then
              echo "Error: Failed to retrieve cluster or service name."
              exit 1
          fi

          # Set output variables
          echo "::set-output name=cluster::$cluster_name"
          echo "::set-output name=service::$service_name"

      - name: Stop ECS Tasks
        run: |
          echo "Stopping ECS Tasks..."
          # Retrieve cluster and service names from outputs
          cluster_name="${{ steps.get-names.outputs.cluster }}"
          service_name="${{ steps.get-names.outputs.service }}"
          # Debugging: Print cluster and service names
          echo "Cluster Name: $cluster_name"
          echo "Service Name: $service_name"
          # Check if cluster_name and service_name are empty
          if [ -z "$cluster_name" ] || [ -z "$service_name" ]; then
              echo "Error: Failed to retrieve cluster or service name."
              exit 1
          fi
          # Stop ECS tasks
          aws ecs update-service --cluster "$cluster_name" --service "$service_name" --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
